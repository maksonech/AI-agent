#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ analyze_single_alert —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
"""
import os
import sys
import logging
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('test_custom_alert')

# –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
project_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–µ—Ä—Ç–∞
try:
    from Source.tools import analyze_single_alert, analyze_file_alert
    logger.info("–§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–µ—Ä—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
    sys.exit(1)

def test_single_alert(alert_file=None):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é analyze_single_alert —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–ª–µ—Ä—Ç–æ–º
    
    Args:
        alert_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–ª–µ—Ä—Ç–æ–º. –ï—Å–ª–∏ None, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä.
    """
    print("=====================================")
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–µ—Ä—Ç–∞")
    print("=====================================")
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
    alert_files = {
        '1': {
            'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç',
            'path': os.path.join(project_dir, 'TestAlerts/one_line_alert.txt')
        },
        '2': {
            'name': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã',
            'path': os.path.join(project_dir, 'TestAlerts/multiple_alerts.txt')
        },
        '3': {
            'name': '–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç',
            'path': os.path.join(project_dir, 'TestAlerts/one_line_problematic_alert.txt')
        }
    }
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    if not alert_file:
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∞–ª–µ—Ä—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        for key, file_info in alert_files.items():
            print(f"{key}. {file_info['name']} ({os.path.basename(file_info['path'])})")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ (1-3): ")
        if choice in alert_files:
            alert_file = alert_files[choice]['path']
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç.")
            alert_file = alert_files['1']['path']
    
    if not os.path.exists(alert_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {alert_file}")
        return
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    try:
        with open(alert_file, 'r', encoding='utf-8') as f:
            alert_text = f.read()
        print(f"\nüìÑ –ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: {alert_file}")
        print(f"   –†–∞–∑–º–µ—Ä: {len(alert_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {alert_text[:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
    print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∞–ª–µ—Ä—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π analyze_single_alert...")
    try:
        result = analyze_single_alert(alert_text)
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n")
        print(result)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–ª–µ—Ä—Ç–∞: {str(e)}")
        import traceback
        traceback.print_exc()

def test_file_alert(alert_file=None):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é analyze_file_alert —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
    
    Args:
        alert_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–ª–µ—Ä—Ç–æ–º. –ï—Å–ª–∏ None, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä.
    """
    print("=====================================")
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ —Å –∞–ª–µ—Ä—Ç–∞–º–∏")
    print("=====================================")
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
    alert_files = {
        '1': {
            'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç',
            'path': os.path.join(project_dir, 'TestAlerts/one_line_alert.txt')
        },
        '2': {
            'name': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã',
            'path': os.path.join(project_dir, 'TestAlerts/multiple_alerts.txt')
        },
        '3': {
            'name': '–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç',
            'path': os.path.join(project_dir, 'TestAlerts/one_line_problematic_alert.txt')
        }
    }
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    if not alert_file:
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∞–ª–µ—Ä—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        for key, file_info in alert_files.items():
            print(f"{key}. {file_info['name']} ({os.path.basename(file_info['path'])})")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ (1-3): ")
        if choice in alert_files:
            alert_file = alert_files[choice]['path']
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç.")
            alert_file = alert_files['1']['path']
    
    if not os.path.exists(alert_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {alert_file}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
    print(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(alert_file)} —Å —Ñ—É–Ω–∫—Ü–∏–µ–π analyze_file_alert...")
    try:
        result = analyze_file_alert(alert_file)
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n")
        print(result)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {str(e)}")
        import traceback
        traceback.print_exc()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    """
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–µ—Ä—Ç–æ–≤')
    parser.add_argument('-f', '--file', choices=['one_line', 'multiple', 'problematic'], 
                        help='–§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: one_line, multiple –∏–ª–∏ problematic')
    parser.add_argument('-m', '--method', choices=['single', 'file'], default='single',
                        help='–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: single (analyze_single_alert) –∏–ª–∏ file (analyze_file_alert)')
    parser.add_argument('-i', '--interactive', action='store_true',
                        help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∞–π–ª–∞ –∏ –º–µ—Ç–æ–¥–∞')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    alert_file = None
    if args.file:
        file_mapping = {
            'one_line': os.path.join(project_dir, 'TestAlerts/one_line_alert.txt'),
            'multiple': os.path.join(project_dir, 'TestAlerts/multiple_alerts.txt'),
            'problematic': os.path.join(project_dir, 'TestAlerts/one_line_problematic_alert.txt')
        }
        alert_file = file_mapping.get(args.file)
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if args.interactive:
        print("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:")
        print("1. –ê–Ω–∞–ª–∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ (analyze_single_alert)")
        print("2. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å –∞–ª–µ—Ä—Ç–∞–º–∏ (analyze_file_alert)")
        
        method_choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Ç–æ–¥–∞ (1-2): ")
        
        if method_choice == '1':
            test_single_alert(alert_file)
        elif method_choice == '2':
            test_file_alert(alert_file)
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞.")
            test_single_alert(alert_file)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        if args.method == 'single':
            test_single_alert(alert_file)
        else:
            test_file_alert(alert_file)

if __name__ == "__main__":
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if len(sys.argv) == 1:
        os.environ['PYTHONIOENCODING'] = 'utf-8'
        sys.argv.append('-i')  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    
    main() 