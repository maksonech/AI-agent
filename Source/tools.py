from langchain.tools import Tool
import re
import os
import logging
from datetime import datetime, timedelta
from Source.utils import courses_database  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
from Source.alert_parser import (
    parse_alert,
    get_data_alert as parse_get_data_alert,
    extract_additional_alert_info,
    get_icon_for_key
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
tool_logger = logging.getLogger('tool_logger')
tool_logger.setLevel(logging.DEBUG)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'Logs')
os.makedirs(log_dir, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
tool_log_file = os.path.join(log_dir, f'tools_debug_{datetime.now().strftime("%Y-%m-%d")}.log')
file_handler = logging.FileHandler(tool_log_file, encoding='utf-8')
file_handler.setLevel(logging.DEBUG)

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É
tool_logger.addHandler(file_handler)

# –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç get_bot_response –Ω–µ —É–¥–∞—Å—Ç—Å—è
def fallback_bot_response(prompt, max_tokens=1000, alert_data=None):
    return f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç –±–æ—Ç–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ get_bot_response. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç—ã."

# –§—É–Ω–∫—Ü–∏—è get_data_alert —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –æ–±–µ—Ä—Ç–∫–æ–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ alert_parser
def get_data_alert(alert_text: str) -> dict:
    """
    –ü–æ–ª—É—á–∏–≤ —Ç–µ–∫—Å—Ç –∞–ª–µ—Ä—Ç–∞, —Ä–∞–∑–±–µ—Ä–∏ –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ–æ–±—â–∏ –∫–æ–≥–¥–∞ –±—ã–ª –∞–ª–µ—Ä—Ç,
    –Ω–∞ –∫–∞–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ, –∫–∞–∫–∞—è –æ—à–∏–±–∫–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –∫–æ–¥ HTTP –æ—à–∏–±–∫–∏,
    —É–∫–∞–∂–∏ –Ω–∞ –∫–∞–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö OpenShift –≤–æ–∑–Ω–∏–∫–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥,
    –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è alert_parser
    return parse_get_data_alert(alert_text)

def find_endpoint_info(query: str) -> str:
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ integration_endpoints.json –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
    """
    matching_endpoints = []
    
    # –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    query = query.lower().strip()
    
    # –ü–æ–∏—Å–∫ –ø–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
    for endpoint in courses_database:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL –ø—É—Ç–∏
        if query in endpoint.get("request", "").lower():
            matching_endpoints.append(endpoint)
            continue
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        if query in endpoint.get("description", "").lower():
            matching_endpoints.append(endpoint)
            continue
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ö–æ—Å—Ç—É
        if query in endpoint.get("host", "").lower():
            matching_endpoints.append(endpoint)
            continue
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if matching_endpoints:
        result = "–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É:\n\n"
        
        for i, endpoint in enumerate(matching_endpoints, 1):
            result += f"{i}. –ó–∞–ø—Ä–æ—Å: {endpoint.get('request', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            result += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {endpoint.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            result += f"   –•–æ—Å—Ç: {endpoint.get('host', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            result += f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {endpoint.get('direction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            
        return result
    else:
        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."


def analyze_file_alert(file_path: str = None) -> str:
    """
    –ê–Ω–∞–ª–∏–∑ –∞–ª–µ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ one_line_alert.txt –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.
    –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ.
    """
    try:
        tool_logger.info("–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ analyze_file_alert")
        
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not file_path:
            root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
            file_path = os.path.join(root_dir, 'TestAlerts/one_line_alert.txt')
            tool_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            error_msg = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            tool_logger.error(error_msg)
            return error_msg
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        tool_logger.info(f"–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                alert_text = f.read()
        except UnicodeDecodeError:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤ UTF-8, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
            with open(file_path, 'r', encoding='cp1251') as f:
                alert_text = f.read()
        
        tool_logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(alert_text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ü–†–û–ú, PROM –∏–ª–∏ DEV, –∑–∞—Ç–µ–º |
        alert_starts = re.finditer(r'(?:^|\n)(?:–ü–†–û–ú|PROM|DEV) \|', alert_text)
        alert_positions = [match.start() for match in alert_starts]
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if not alert_positions:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω - –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "–ê–° –†–µ—Ñ–ª–µ–∫—Å"
            alt_alert_starts = re.finditer(r'(?:^|\n)–ê–° –†–µ—Ñ–ª–µ–∫—Å', alert_text)
            alert_positions = [match.start() for match in alt_alert_starts]
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–¥–∏–Ω –∞–ª–µ—Ä—Ç
            if not alert_positions:
                tool_logger.info("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–ª–µ—Ä—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–¥–∏–Ω –∞–ª–µ—Ä—Ç")
                return analyze_single_alert(alert_text, include_bot_analysis=True)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        alerts = []
        for i in range(len(alert_positions)):
            start = alert_positions[i]
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª–µ—Ä—Ç, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞
            end = alert_positions[i+1] if i < len(alert_positions) - 1 else len(alert_text)
            alert_content = alert_text[start:end].strip()
            alerts.append(alert_content)
        
        tool_logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        results = []
        open_count = 0
        resolved_count = 0
        unknown_count = 0
        
        for i, alert in enumerate(alerts, 1):
            tool_logger.info(f"–ê–Ω–∞–ª–∏–∑ –∞–ª–µ—Ä—Ç–∞ #{i}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞
            status = "UNKNOWN"
            if re.search(r'(?:OPEN|ACTIVE)', alert, re.IGNORECASE):
                status = "OPEN"
                open_count += 1
            elif re.search(r'(?:RESOLVED|CLOSED)', alert, re.IGNORECASE):
                status = "RESOLVED"
                resolved_count += 1
            else:
                unknown_count += 1
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2 –∞–ª–µ—Ä—Ç–æ–≤, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            if i <= 2:
                result = analyze_single_alert(alert, include_bot_analysis=True)
            else:
                result = analyze_single_alert(alert, include_bot_analysis=False)
            
            results.append(f"### –ê–ª–µ—Ä—Ç #{i}\n\n{result}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –∞–ª–µ—Ä—Ç–∞–º
        summary = f"# üìä –°–≤–æ–¥–∫–∞ –ø–æ –∞–ª–µ—Ä—Ç–∞–º –≤ —Ñ–∞–π–ª–µ `{os.path.basename(file_path)}`\n\n"
        summary += f"| **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** | **–ó–Ω–∞—á–µ–Ω–∏–µ** |\n"
        summary += f"|:---------:|:----------:|\n"
        summary += f"| **–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤** | {len(alerts)} |\n"
        summary += f"| **–ê–∫—Ç–∏–≤–Ω—ã—Ö** üî¥ | {open_count} |\n"
        summary += f"| **–†–µ—à–µ–Ω–Ω—ã—Ö** üü¢ | {resolved_count} |\n"
        summary += f"| **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö** ‚ö™ | {unknown_count} |\n\n"
        
        if open_count > 0:
            summary += f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í —Ñ–∞–π–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {open_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è.\n\n"
            
        if resolved_count > 0:
            summary += f"‚úÖ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {resolved_count} –∞–ª–µ—Ä—Ç–æ–≤ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–µ—Ä—Ç–æ–≤
        summary += add_general_recommendations(open_count, resolved_count, unknown_count)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        combined_result = f"{summary}\n## –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–ª–µ—Ä—Ç–æ–≤\n\n" + "\n\n".join(results)
        
        tool_logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–Ω–∞–ª–∏–∑ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
        
        return combined_result
            
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {str(e)}"
        tool_logger.error(error_message, exc_info=True)
        return f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:** {str(e)}"


def add_general_recommendations(open_count, resolved_count, unknown_count):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–µ—Ä—Ç–æ–≤
    
    Args:
        open_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        resolved_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        unknown_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        
    Returns:
        str: –°—Ç—Ä–æ–∫–∞ —Å –æ–±—â–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    recommendations = "## üìã –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
    
    if open_count > 0:
        recommendations += "### üî¥ –ü–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∞–ª–µ—Ä—Ç–∞–º\n\n"
        recommendations += "1. **–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è:** –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∞–ª–µ—Ä—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (ERROR, AVAILABILITY)\n"
        recommendations += "2. **–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –º–æ–≥—É—Ç –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª–µ—Ä—Ç–æ–≤ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –æ–¥–Ω–æ–π –ø–µ—Ä–≤–æ–ø—Ä–∏—á–∏–Ω–æ–π\n"
        recommendations += "3. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã\n\n"
    
    if resolved_count > 0:
        recommendations += "### üü¢ –ü–æ —Ä–µ—à–µ–Ω–Ω—ã–º –∞–ª–µ—Ä—Ç–∞–º\n\n"
        recommendations += "1. **–ê–Ω–∞–ª–∏–∑:** –ò–∑—É—á–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º\n"
        recommendations += "2. **–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** –ó–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º\n"
        recommendations += "3. **–ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã:** –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–µ—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º\n\n"
    
    if unknown_count > 0:
        recommendations += "### ‚ö™ –ü–æ –∞–ª–µ—Ä—Ç–∞–º —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º\n\n"
        recommendations += "1. **–ü—Ä–æ–≤–µ—Ä–∫–∞:** –£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —ç—Ç–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        recommendations += "2. **–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:** –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Ç–∏–ø —ç—Ç–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤\n"
        recommendations += "3. **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–ª–µ—Ä—Ç–æ–≤
    recommendations += "### üîß –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
    recommendations += "1. **–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ** —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n"
    recommendations += "2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è** –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º –∏ —Å–µ—Ä–≤–∏—Å–æ–≤\n"
    recommendations += "3. **–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ** –≤—Å–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º\n"
    recommendations += "4. **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã** –ø–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—é –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º\n\n"
    
    return recommendations


def analyze_single_alert(alert_text, include_bot_analysis=True):
    """
    –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∞–ª–µ—Ä—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥.
    """
    tool_logger.info("–ê–Ω–∞–ª–∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞")
    
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∞–ª–µ—Ä—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ alert_parser
        http_code_match = re.search(r'HTTP (?:ERROR )?(\d{3})|(\d{3}) POST', alert_text, re.IGNORECASE)
        http_code = http_code_match.group(1) if http_code_match and http_code_match.group(1) else http_code_match.group(2) if http_code_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ —Å–µ—Ä–≤–∏—Å–µ –∏ —Ç–∏–ø–µ –∞–ª–µ—Ä—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ alert_parser
        from Source.alert_parser import extract_service_name
        service = extract_service_name(alert_text)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω –≤ —Å–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
        alert_type_match = re.search(r'\| ([^|]+) \|', alert_text)
        alert_type = alert_type_match.group(1).strip() if alert_type_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∞–ª–µ—Ä—Ç–∞ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        timestamp_match = re.search(r'(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}:\d{2})', alert_text)
        if not timestamp_match:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã, –∫–∞–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ extract_alert_details
            time_patterns = [
                # Format: 20:14 (MSK) 21.04.2025
                r'Problem detected at:\s*(\d{1,2}:\d{2}\s*\([A-Z]+\)\s*\d{1,2}\.\d{1,2}\.\d{4})',
                # Format: 10:15 AM 25.04.2023
                r'Problem detected at:\s*(\d{1,2}:\d{2}\s*(?:AM|PM)\s*\d{1,2}\.\d{1,2}\.\d{4})',
                # Format with dash: 21.04.2025 - 15:30
                r'Problem detected at:\s*(\d{1,2}\.\d{1,2}\.\d{4}\s*-\s*\d{1,2}:\d{2})',
                # Format with date first: 21.04.2025 15:30 (with or without timezone)
                r'Problem detected at:\s*(\d{1,2}\.\d{1,2}\.\d{4}\s+\d{1,2}:\d{2}(?:\s*\([A-Z]+\))?)',
                # General format with any timezone
                r'Problem detected at:\s*(\d{1,2}:\d{2}(?:\s*\([A-Z]+\))?\s*\d{1,2}\.\d{1,2}\.\d{4})'
            ]
            
            for pattern in time_patterns:
                timestamp_match = re.search(pattern, alert_text, re.IGNORECASE)
                if timestamp_match:
                    break
                    
        timestamp = timestamp_match.group(1) if timestamp_match else "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–ª–µ—Ä—Ç–∞
        status = "UNKNOWN"
        if re.search(r'(?:OPEN|ACTIVE)', alert_text, re.IGNORECASE):
            status = "OPEN"
        elif re.search(r'(?:RESOLVED|CLOSED)', alert_text, re.IGNORECASE):
            status = "RESOLVED"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–ª–µ—Ä—Ç–∞
        alert_id_match = re.search(r'P-(\d+)', alert_text)
        alert_id = alert_id_match.group(1) if alert_id_match else "Unknown"
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª–µ—Ä—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ alert_parser
        additional_info = extract_additional_alert_info(alert_text)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å-–º–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        status_info = {
            "OPEN": {
                "icon": "üî¥",
                "badge": "üö® –û–¢–ö–†–´–¢",
                "color": "**",
                "border": "---"
            },
            "ACTIVE": {
                "icon": "üî¥",
                "badge": "‚ö° –ê–ö–¢–ò–í–ï–ù",
                "color": "**",
                "border": "---"
            },
            "RESOLVED": {
                "icon": "üü¢",
                "badge": "‚úÖ –†–ï–®–ï–ù",
                "color": "**",
                "border": "---"
            },
            "CLOSED": {
                "icon": "üü¢",
                "badge": "‚úÖ –ó–ê–ö–†–´–¢",
                "color": "**",
                "border": "---"
            },
            "UNKNOWN": {
                "icon": "‚ö™",
                "badge": "‚ùì –ù–ï–ò–ó–í–ï–°–¢–ï–ù",
                "color": "**",
                "border": "---"
            }
        }
        
        status_data = status_info.get(status, status_info["UNKNOWN"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP –∫–æ–¥ –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        http_code_info = {
            "200": {"icon": "‚úÖ", "text": "OK", "description": "–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω"},
            "201": {"icon": "‚úÖ", "text": "Created", "description": "–†–µ—Å—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"},
            "204": {"icon": "‚úÖ", "text": "No Content", "description": "–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"},
            "400": {"icon": "‚ö†Ô∏è", "text": "Bad Request", "description": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ–±—ã—á–Ω–æ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"},
            "401": {"icon": "üîí", "text": "Unauthorized", "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"},
            "403": {"icon": "üö´", "text": "Forbidden", "description": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —É—Å–ø–µ—à–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"},
            "404": {"icon": "üîç", "text": "Not Found", "description": "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"},
            "405": {"icon": "‚õî", "text": "Method Not Allowed", "description": "–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞"},
            "408": {"icon": "‚è±Ô∏è", "text": "Request Timeout", "description": "–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"},
            "429": {"icon": "üîÑ", "text": "Too Many Requests", "description": "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç"},
            "500": {"icon": "üí•", "text": "Internal Server Error", "description": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"},
            "501": {"icon": "üöß", "text": "Not Implemented", "description": "–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"},
            "502": {"icon": "üîÑ", "text": "Bad Gateway", "description": "–û—à–∏–±–∫–∞ —à–ª—é–∑–∞ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞–ø—Ä–æ—Å–∞"},
            "503": {"icon": "üõë", "text": "Service Unavailable", "description": "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"},
            "504": {"icon": "‚è±Ô∏è", "text": "Gateway Timeout", "description": "–®–ª—é–∑ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –≤—ã—à–µ—Å—Ç–æ—è—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"}
        }
        
        http_display = f"**{http_code}**"
        # Convert http_code to string to ensure it works as a dictionary key
        http_code_str = str(http_code)
        if http_code_str in http_code_info:
            http_icon = http_code_info[http_code_str]['icon']
            http_text = http_code_info[http_code_str]['text']
            http_desc = http_code_info[http_code_str]['description']
            http_display = f"{http_icon} **{http_code}** ({http_text})\n> *{http_desc}*"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        time_display = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if timestamp != "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ":
            try:
                dt = datetime.strptime(timestamp, "%d.%m.%Y %H:%M:%S")
                time_display = f"{dt.strftime('%d.%m.%Y')} {dt.strftime('%H:%M:%S')}"
            except:
                time_display = timestamp
        
        # –í–†–ï–ú–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª–µ—Ä—Ç–µ
        alert_info = f"# –ê–ª–µ—Ä—Ç ID: {alert_id} - {status}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        alert_info += f"**–°–µ—Ä–≤–∏—Å:** {service}\n"
        alert_info += f"**–¢–∏–ø:** {alert_type}\n"
        alert_info += f"**HTTP –∫–æ–¥:** {http_code}\n"
        alert_info += f"**–í—Ä–µ–º—è:** {time_display}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–±–µ–∑ –∏–∫–æ–Ω–æ–∫)
        for key, value in additional_info.items():
            if value and key in ["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ù–∞—á–∞–ª–æ –ø—Ä–æ–±–ª–µ–º—ã", "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"]:
                alert_info += f"**{key}:** {value}\n"
        
        # –¢–µ–∫—Å—Ç –∞–ª–µ—Ä—Ç–∞
        alert_info += "\n**–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–ª–µ—Ä—Ç–∞:**\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        formatted_text = alert_text.replace("\n\n", "\n")
        if len(formatted_text) > 300:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
            formatted_text = formatted_text[:300] + "...\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏]"
        
        alert_info += f"```\n{formatted_text}\n```\n"
        
        # –ï—Å–ª–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –±–æ—Ç–æ–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not include_bot_analysis:
            return alert_info
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∞–ª–µ—Ä—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        bot_prompt = f"""
–°—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞: {status}, 
–°–µ—Ä–≤–∏—Å: {service}, 
–¢–∏–ø: {alert_type},
HTTP –∫–æ–¥: {http_code}.
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ–º–ø—Ç
        for key, value in additional_info.items():
            if value:
                bot_prompt += f"{key}: {value},\n"

        bot_prompt += "\n–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–ª–µ—Ä—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        bot_prompt += "1. –û–±—ä—è—Å–Ω–∏ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
        bot_prompt += "2. –û–ø—Ä–µ–¥–µ–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã\n"
        bot_prompt += "3. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è\n"
        bot_prompt += "4. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é –ø–æ–¥–æ–±–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –±—É–¥—É—â–µ–º\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
        tool_logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É –±–æ—Ç–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        structured_data = {
            'status': status,
            'service': service,
            'alert_type': alert_type,
            'http_code': http_code if http_code != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else None,
            'timestamp': timestamp if timestamp != "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ" else None
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        structured_data.update(additional_info)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç get_bot_response
        try:
            from Source.agent import get_bot_response
        except ImportError as e:
            tool_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å get_bot_response: {str(e)}")
            get_bot_response = fallback_bot_response
            
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ get_bot_response —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤
        bot_response = get_bot_response(bot_prompt, max_tokens=800, alert_data=structured_data)
        
        # –í–†–ï–ú–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–µ—Ä—Ç–µ
        # –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        return alert_info
        
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–ª–µ—Ä—Ç–∞: {str(e)}"
        tool_logger.error(error_message, exc_info=True)
        return f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:** {str(e)}"


def get_related_alert_info(alert_data):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–ª–µ—Ä—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        alert_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–ª–µ—Ä—Ç–∞
        
    Returns:
        str: –°—Ç—Ä–æ–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    result = ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HTTP –∫–æ–¥–∞—Ö, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω HTTP –∫–æ–¥
    if alert_data.get('http_code') and alert_data['http_code'] not in ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", None]:
        http_code = str(alert_data['http_code'])
        
        http_code_descriptions = {
            "4xx": "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±—ã—á–Ω–æ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞. "
                  "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.",
            "5xx": "–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ä–≤–µ—Ä–∞. "
                  "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞, —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤."
        }
        
        if http_code.startswith("4"):
            result += f"**üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –æ—à–∏–±–∫–µ (4xx):**\n\n"
            result += f"{http_code_descriptions['4xx']}\n\n"
        elif http_code.startswith("5"):
            result += f"**üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –æ—à–∏–±–∫–µ (5xx):**\n\n"
            result += f"{http_code_descriptions['5xx']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Kubernetes, –µ—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å Kubernetes
    if "Kubernetes" in alert_data.get("alert_type", "") or alert_data.get("Kubernetes Workload"):
        result += f"**‚ò∏Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Kubernetes:**\n\n"
        result += f"- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–æ–≤: `kubectl get pods`\n"
        result += f"- –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏: `kubectl logs <pod-name>`\n"
        result += f"- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–±—ã—Ç–∏—è: `kubectl get events`\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞
    if alert_data.get("alert_type"):
        if "AVAILABILITY" in alert_data["alert_type"]:
            result += f"**üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:**\n\n"
            result += f"- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞\n"
            result += f"- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            result += f"- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ 99.9%\n\n"
        elif "ERROR" in alert_data["alert_type"]:
            result += f"**‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –æ—à–∏–±–∫–∞–º–∏:**\n\n"
            result += f"- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫\n"
            result += f"- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏\n"
            result += f"- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
    
    return result


# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_data_alert
get_data_alert_tool = Tool(
    name="Data Alert Parser",
    func=get_data_alert,
    description="–ü–æ–ª—É—á–∞—é —Ç–µ–∫—Å—Ç –∞–ª–µ—Ä—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é —Ä–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö."
)

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
find_endpoint_info_tool = Tool(
    name="API Endpoint Info",
    func=find_endpoint_info,
    description="–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
)

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–µ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
analyze_file_alert_tool = Tool(
    name="File Alert Analyzer",
    func=analyze_file_alert,
    description="–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–ª–µ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ one_line_alert.txt –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞."
)

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ GigaChat
def check_gigachat_token_status(input_text: str = "") -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤.
    
    Args:
        input_text: –õ—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
        
    Returns:
        str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–∞—Ö
    """
    try:
        tool_logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å GigaChat
        from langchain_gigachat.chat_models import GigaChat
        from langchain_core.messages import HumanMessage
        import requests
        import json
        import base64
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–¥—ã –∏–∑ –º–æ–¥–µ–ª–∏ agent.py
        try:
            from Source.agent import model as gigachat_model
            credentials = gigachat_model.credentials
            scope = gigachat_model.scope
        except ImportError:
            tool_logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å GigaChat –∏–∑ agent.py")
            return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API GigaChat
        base_url = "https://gigachat.devices.sberbank.ru/api/v1"
        
        # –ü–æ—Å–∫–æ–ª—å–∫—É credentials –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64, –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
        try:
            # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64 –∏ –ø–æ–ª—É—á–∏—Ç—å client_id:client_secret
            decoded_credentials = base64.b64decode(credentials).decode('utf-8')
            if ':' in decoded_credentials:
                client_id, client_secret = decoded_credentials.split(':', 1)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫—Ä–µ–¥—ã
                client_id = credentials
                client_secret = ""
        except Exception as e:
            tool_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}")
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –∫—Ä–µ–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ id:secret
            if ':' in credentials:
                client_id, client_secret = credentials.split(':', 1)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫—Ä–µ–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ ID
                client_id = credentials
                client_secret = ""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_url = f"{base_url}/oauth/token"
        auth_headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "RqUID": "e1895bdc-de6f-46f0-89f6-65df5ed71b61"
        }
        auth_data = {
            "scope": scope,
            "grant_type": "client_credentials"
        }
        
        tool_logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {auth_url}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if hasattr(gigachat_model, 'auth_url') and gigachat_model.auth_url:
                tool_logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {gigachat_model.auth_url}")
                auth_url = gigachat_model.auth_url
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            auth_response = requests.post(
                auth_url,
                headers=auth_headers,
                data=auth_data,
                auth=(client_id, client_secret) if client_secret else None,
                timeout=10,
                verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            )
        except Exception as e:
            tool_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        
        if auth_response.status_code != 200:
            tool_logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response.status_code}, {auth_response.text}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response.status_code}\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {auth_response.text}"
        
        token_data = auth_response.json()
        access_token = token_data.get("access_token")
        
        if not access_token:
            tool_logger.error("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            return "‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —Ç–æ–∫–µ–Ω–æ–≤
        info_url = f"{base_url}/accounts/info"
        info_headers = {
            "Authorization": f"Bearer {access_token}",
            "Accept": "application/json"
        }
        
        try:
            info_response = requests.get(info_url, headers=info_headers, timeout=10, verify=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        except Exception as e:
            tool_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
        
        if info_response.status_code != 200:
            tool_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info_response.status_code}, {info_response.text}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö: {info_response.status_code}\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {info_response.text}"
        
        try:
            account_info = info_response.json()
        except Exception as e:
            tool_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –ª–∏–º–∏—Ç–∞—Ö
        result = f"## üîë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ GigaChat\n\n"
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        if token_data.get("expires_in"):
            expires_in = token_data.get("expires_in")
            result += f"**–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:** {expires_in} —Å–µ–∫—É–Ω–¥\n\n"
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        if "limits" in account_info and account_info["limits"]:
            limits = account_info["limits"]
            result += "### –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:\n\n"
            result += "| üìä –¢–∏–ø | ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ | üîÑ –õ–∏–º–∏—Ç | üíØ –û—Å—Ç–∞–ª–æ—Å—å |\n"
            result += "|:------|:--------------|:--------|:-----------|\n"
            
            for limit in limits:
                limit_type = limit.get("intervalType", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                current_usage = limit.get("currentUsage", 0)
                max_limit = limit.get("maxLimit", 0)
                remaining = max_limit - current_usage if max_limit > current_usage else 0
                percent = round((current_usage / max_limit) * 100, 2) if max_limit > 0 else 0
                
                result += f"| **{limit_type}** | {current_usage} | {max_limit} | {remaining} ({percent}%) |\n"
        else:
            result += "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ–∫–µ–Ω–∞
        if "status" in account_info:
            status = account_info["status"]
            result += f"\n### –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: **{status}**\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
        result += "\n### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:\n\n"
        result += "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã —ç–∫–æ–Ω–æ–º–Ω–æ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ\n"
        result += "- –ü—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É, —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã\n"
        result += "- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        tool_logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ: {json.dumps(account_info, indent=2)}")
        
        return result
        
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}"
        tool_logger.error(error_message, exc_info=True)
        return f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ GigaChat:** {str(e)}"

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ GigaChat
check_gigachat_token_status_tool = Tool(
    name="GigaChat Token Status",
    func=check_gigachat_token_status,
    description="–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —Ç–æ–∫–µ–Ω–æ–≤."
)

# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
get_data_alert = get_data_alert_tool
find_endpoint_info = find_endpoint_info_tool
analyze_file_alert = analyze_file_alert_tool
check_token_status = check_gigachat_token_status_tool

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
if __name__ == "__main__":
    # –ß–∏—Ç–∞–µ–º –∞–ª–µ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    root_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    alert_file_path = os.path.join(root_dir, 'TestAlerts/one_line_alert.txt')
    
    try:
        if os.path.exists(alert_file_path):
            with open(alert_file_path, 'r', encoding='utf-8') as f:
                alert_text = f.read()
                print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω –∞–ª–µ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ {alert_file_path}, –¥–ª–∏–Ω–∞: {len(alert_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {alert_file_path}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            
            # –°–æ–∑–¥–∞–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
            os.makedirs(os.path.dirname(alert_file_path), exist_ok=True)
            with open(alert_file_path, 'w', encoding='utf-8') as f:
                f.write(alert_text)
                print(f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∞–ª–µ—Ä—Ç–∞: {alert_file_path}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    
    # –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    try:
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ get_data_alert:")
        result = get_data_alert.invoke(alert_text)
        print(result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_data_alert: {str(e)}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
    try:
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ analyze_file_alert:")
        file_result = analyze_file_alert()
        print("\n–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:")
        print(file_result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ analyze_file_alert: {str(e)}")