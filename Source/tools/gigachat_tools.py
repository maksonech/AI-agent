"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat API.
–°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å GigaChat.
"""
import base64
import json
import urllib3
import requests
from langchain.tools import Tool
from typing import Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
from Source.config import get_settings, CredentialsManager
from Source.config.logging_config import setup_tool_logger
from Source.config.exceptions import (
    GigaChatAPIError, AuthenticationError, CredentialsError,
    exception_handler, format_exception
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
tool_logger = setup_tool_logger("gigachat")

@exception_handler(
    error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ GigaChat",
    logger=tool_logger,
    expected_exceptions=[GigaChatAPIError, AuthenticationError, CredentialsError, requests.RequestException]
)
def check_gigachat_token_status(input_text: str = "") -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤.
    
    Args:
        input_text: –õ—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
        
    Returns:
        str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–∞—Ö
        
    Raises:
        CredentialsError: –ï—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        AuthenticationError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ API
        GigaChatAPIError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API GigaChat
    """
    tool_logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    credentials_manager = CredentialsManager(load_from_env=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        credentials_manager.validate_gigachat_credentials()
    except CredentialsError as e:
        tool_logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e.message}")
        raise
    
    gigachat_creds = credentials_manager.get_gigachat_credentials()
    credentials = gigachat_creds.get("credentials")
    scope = gigachat_creds.get("scope", "GIGACHAT_API_PERS")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_settings()
    
    # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API GigaChat
    base_url = "https://gigachat.devices.sberbank.ru/api/v1"
    
    # –ü–æ—Å–∫–æ–ª—å–∫—É credentials –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64, –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
    try:
        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64 –∏ –ø–æ–ª—É—á–∏—Ç—å client_id:client_secret
        decoded_credentials = base64.b64decode(credentials).decode('utf-8')
        if ':' in decoded_credentials:
            client_id, client_secret = decoded_credentials.split(':', 1)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫—Ä–µ–¥—ã
            client_id = credentials
            client_secret = ""
    except Exception as e:
        tool_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}")
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –∫—Ä–µ–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ id:secret
        if ':' in credentials:
            client_id, client_secret = credentials.split(':', 1)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫—Ä–µ–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ ID
            client_id = credentials
            client_secret = ""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = settings.get("gigachat_auth_url", f"{base_url}/oauth/token")
    auth_headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": "e1895bdc-de6f-46f0-89f6-65df5ed71b61"
    }
    auth_data = {
        "scope": scope,
        "grant_type": "client_credentials"
    }
    
    tool_logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {auth_url}")
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_response = requests.post(
            auth_url,
            headers=auth_headers,
            data=auth_data,
            auth=(client_id, client_secret) if client_secret else None,
            timeout=10,
            verify=gigachat_creds.get("verify_ssl_certs", False)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        )
    except requests.RequestException as e:
        error_message = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
        tool_logger.error(error_message)
        raise GigaChatAPIError(error_message, details={"url": auth_url})
    
    if auth_response.status_code != 200:
        error_message = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response.status_code}"
        tool_logger.error(f"{error_message}, {auth_response.text}")
        
        raise AuthenticationError(
            error_message,
            status_code=auth_response.status_code,
            api_response=auth_response.text,
            details={"url": auth_url}
        )
    
    token_data = auth_response.json()
    access_token = token_data.get("access_token")
    
    if not access_token:
        error_message = "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ"
        tool_logger.error(error_message)
        raise AuthenticationError(error_message, details={"response": token_data})
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —Ç–æ–∫–µ–Ω–æ–≤
    info_url = settings.get("gigachat_info_url", f"{base_url}/accounts/info")
    info_headers = {
        "Authorization": f"Bearer {access_token}",
        "Accept": "application/json"
    }
    
    try:
        info_response = requests.get(
            info_url, 
            headers=info_headers, 
            timeout=10, 
            verify=gigachat_creds.get("verify_ssl_certs", False)
        )
    except requests.RequestException as e:
        error_message = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
        tool_logger.error(error_message)
        raise GigaChatAPIError(error_message, details={"url": info_url})
    
    if info_response.status_code != 200:
        error_message = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info_response.status_code}"
        tool_logger.error(f"{error_message}, {info_response.text}")
        
        raise GigaChatAPIError(
            error_message,
            status_code=info_response.status_code,
            api_response=info_response.text,
            details={"url": info_url}
        )
    
    try:
        account_info = info_response.json()
    except json.JSONDecodeError as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –æ—Ç–≤–µ—Ç–∞: {str(e)}"
        tool_logger.error(error_message)
        raise GigaChatAPIError(error_message, details={"response": info_response.text})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –ª–∏–º–∏—Ç–∞—Ö
    result = f"## üîë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ GigaChat\n\n"
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    if token_data.get("expires_in"):
        expires_in = token_data.get("expires_in")
        result += f"**–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:** {expires_in} —Å–µ–∫—É–Ω–¥\n\n"
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
    if "limits" in account_info and account_info["limits"]:
        limits = account_info["limits"]
        result += "### –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:\n\n"
        result += "| üìä –¢–∏–ø | ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ | üîÑ –õ–∏–º–∏—Ç | üíØ –û—Å—Ç–∞–ª–æ—Å—å |\n"
        result += "|:------|:--------------|:--------|:-----------|\n"
        
        for limit in limits:
            limit_type = limit.get("intervalType", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            current_usage = limit.get("currentUsage", 0)
            max_limit = limit.get("maxLimit", 0)
            remaining = max_limit - current_usage if max_limit > current_usage else 0
            percent = round((current_usage / max_limit) * 100, 2) if max_limit > 0 else 0
            
            result += f"| **{limit_type}** | {current_usage} | {max_limit} | {remaining} ({percent}%) |\n"
    else:
        result += "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ–∫–µ–Ω–∞
    if "status" in account_info:
        status = account_info["status"]
        result += f"\n### –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: **{status}**\n\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
    result += "\n### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:\n\n"
    result += "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã —ç–∫–æ–Ω–æ–º–Ω–æ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –∏—Ö —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ\n"
    result += "- –ü—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É, —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã\n"
    result += "- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    tool_logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ: {json.dumps(account_info, indent=2)}")
    
    tool_logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ GigaChat –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    return result

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ GigaChat
check_gigachat_token_status_tool = Tool(
    name="GigaChat Token Status",
    func=check_gigachat_token_status,
    description="–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —Ç–æ–∫–µ–Ω–æ–≤."
)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
check_token_status = check_gigachat_token_status_tool 